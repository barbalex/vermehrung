{"version":3,"sources":["webpack:///./src/pages/Vermehrung/Tree/allParentNodesExist.js","webpack:///./src/pages/Vermehrung/Tree/nodes/compareLabel.js","webpack:///./src/pages/Vermehrung/Tree/isNodeOpen.js","webpack:///./src/pages/Vermehrung/Tree/sort.js","webpack:///./src/pages/Vermehrung/Tree/allParentNodesAreOpen.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/artFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/art.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/sammlung/folder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/sammlung/index.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/kultur/folder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/kultur/index.js","webpack:///./src/pages/Vermehrung/Tree/nodes/garten/gartenFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/garten/garten.js","webpack:///./src/pages/Vermehrung/Tree/nodes/herkunft/herkunftFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/herkunft/herkunft.js","webpack:///./src/pages/Vermehrung/Tree/nodes/lieferung/lieferungFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/lieferung/lieferung.js","webpack:///./src/pages/Vermehrung/Tree/nodes/person/personFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/person/person.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/werteListenFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/masseinheitFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/masseinheit.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/zaehleinheitFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/zaehleinheit.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungTypFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungTyp.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungStatusFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungStatus.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungZwischenlagerFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungZwischenlager.js","webpack:///./src/pages/Vermehrung/Tree/nodes/index.js"],"names":["__webpack_require__","r","__webpack_exports__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default","n","nodes","nodePassed","parentNodes","nodeUrl","concat","url","pop","i","length","push","slice","filter","nodeUrls","map","every","some","isEqual","a","b","label","toLowerCase","openNodes","exists","value","sort","isNaN","aI","toString","bI","_isNodeOpen__WEBPACK_IMPORTED_MODULE_0__","node","isNodeOpen","nodeType","menuType","id","hasChildren","_ref","nodesPassed","data","get","el","filterTable","parentId","allParentNodesExist","compareLabel","index","lodash_findIndex__WEBPACK_IMPORTED_MODULE_0__","lodash_findIndex__WEBPACK_IMPORTED_MODULE_0___default","artNodes","artIndex","findIndex","art","find","sammlungen","kulturen","compare","store","tree","buildArtFolder","buildGartenFolder","buildHerkunftFolder","buildLieferungFolder","buildPersonFolder","buildWerteListenFolder","forEach","allParentNodesAreOpen","buildArtArt","buildGartenGarten","buildHerkunftHerkunft","buildLieferungLieferung","buildPersonPerson","buildWLMasseinheitFolder","buildWLZaehleinheitFolder","buildWLLieferungTypFolder","buildWLLieferungStatusFolder","buildWLLieferungZwischenlagerFolder","buildArtSammlungFolder","buildArtKulturFolder","buildWLZaehleinheitZaehleinheit","buildWLLieferungStatusStatus","buildWLLieferungTypTyp","buildWLLieferungZwischenlagerZwischenlager","buildWLMasseinheitMasseinheit","buildArtKultur","buildArtSammlung","uniqBy","join"],"mappings":"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","file":"component---src-pages-vermehrung-tree-nodes-index-js-a939e7c4006774a937f0.js","sourcesContent":["// @flow\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nexport default (nodes, nodePassed) => {\r\n  let parentNodes = []\r\n  const nodeUrl = [...nodePassed.url]\r\n  // pop own url - check only for parents\r\n  nodeUrl.pop()\r\n  for (let i = 1; i < nodeUrl.length; i++) {\r\n    parentNodes.push(nodeUrl.slice(0, i))\r\n  }\r\n  // remove 'Projekte' as that is not contained in openNodes\r\n  parentNodes = parentNodes.filter(\r\n    n => !(n.length === 1 && n[0] === 'Projekte'),\r\n  )\r\n  if (parentNodes.length === 0) return true\r\n  // TODO: this is wrong\r\n  // try creating nodeUrls in the every callback\r\n  const nodeUrls = nodes.map(n => n.url)\r\n  return parentNodes.every(n => nodeUrls.some(n => isEqual(n, nodeUrl)))\r\n}\r\n","//@flow\r\nexport default (a, b) => {\r\n  if (a.label.toLowerCase() < b.label.toLowerCase()) {\r\n    return -1\r\n  } else if (a.label.toLowerCase() > b.label.toLowerCase()) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n","// @flow\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nexport default (openNodes, url) => {\r\n  if (!url) return false\r\n  if (!openNodes) return false\r\n  if (!openNodes.some) return false\r\n\r\n  return openNodes.some(n => isEqual(n, url))\r\n}\r\n","// @flow\r\nconst exists = value => !!value || value === 0\r\n\r\nconst sort = (a, b, i) => {\r\n  // return if no element at this index\r\n  if (!exists(a[i]) && !exists(b[i])) return 0\r\n  // sort array with no more element at this position first\r\n  if (!exists(a[i]) && exists(b[i])) return -1\r\n  if (exists(a[i]) && !exists(b[i])) return 1\r\n  // sort numbers by value\r\n  if (!isNaN(a[i]) && !isNaN(b[i])) {\r\n    if (a[i] === b[i]) return sort(a, b, i + 1)\r\n    return a - b\r\n  }\r\n  // use string value to compare mixed types\r\n  const aI = isNaN(a[i]) ? a[i] : a[i].toString()\r\n  const bI = isNaN(b[i]) ? b[i] : b[i].toString()\r\n  if (aI.toLowerCase() === bI.toLowerCase()) return sort(a, b, i + 1)\r\n  if (aI.toLowerCase() < bI.toLowerCase()) return -1\r\n  if (aI.toLowerCase() > bI.toLowerCase()) return 1\r\n}\r\n\r\nexport default (a, b) => sort(a, b, 0)\r\n","// @flow\r\nimport isNodeOpen from './isNodeOpen'\r\n\r\nexport default (openNodes, nodePassed) => {\r\n  let parentNodes = []\r\n  const node = [...nodePassed]\r\n  for (let i = 1; i < node.length; i++) {\r\n    parentNodes.push(node.slice(0, i))\r\n  }\r\n  // remove 'Projekte' as that is not contained in openNodes\r\n  parentNodes = parentNodes.filter(\r\n    n => !(n.length === 1 && n[0] === 'Projekte'),\r\n  )\r\n  if (parentNodes.length === 0) return true\r\n  return parentNodes.every(n => isNodeOpen(openNodes, n))\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'artFolder',\r\n    id: 'artFolder',\r\n    label: 'Arten',\r\n    url: ['Arten'],\r\n    sort: [1],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n\r\n  const nodes = arten\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'art',\r\n      filterTable: 'art',\r\n      id: `art${el.id}`,\r\n      parentId: 'artFolder',\r\n      label: get(el, 'name', '(keine Art gewählt)'),\r\n      url: ['Arten', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","import findIndex from 'lodash/findIndex'\r\n\r\nexport default ({ url, nodes }) => {\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'artSammlungenFolder',\r\n    id: `art${url[1]}SammlungenFolder`,\r\n    label: 'Sammlungen',\r\n    url: ['Arten', url[1], 'Sammlungen'],\r\n    sort: [1, artIndex, 2],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\nimport findIndex from 'lodash/findIndex'\r\n\r\nimport compareLabel from '../../compareLabel'\r\nimport allParentNodesExist from '../../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data, url }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n  const art = arten.find(a => a.id === url[1])\r\n  const sammlungen = get(art, 'ae_art_art.sammlungsByartId', [])\r\n  const artNodes = nodesPassed.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  const nodes = sammlungen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'sammlung',\r\n      filterTable: 'sammlung',\r\n      id: `sammlung${el.id}`,\r\n      parentId: `art${url[1]}SammlungenFolder`,\r\n      label: `${get(el, 'datum', '(kein Datum)')}: ${get(\r\n        el,\r\n        'herkunftByherkunftId.nr',\r\n        '(keine Nr.)',\r\n      )}`,\r\n      url: ['Arten', url[1], 'Sammlungen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, artIndex, 2, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","import findIndex from 'lodash/findIndex'\r\n\r\nexport default ({ url, nodes }) => {\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'artKulturenFolder',\r\n    id: `art${url[1]}KulturenFolder`,\r\n    label: 'Kulturen',\r\n    url: ['Arten', url[1], 'Kulturen'],\r\n    sort: [1, artIndex, 1],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\nimport findIndex from 'lodash/findIndex'\r\n\r\nimport compareLabel from '../../compareLabel'\r\nimport allParentNodesExist from '../../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data, url }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n  const art = arten.find(a => a.id === url[1])\r\n  const kulturen = get(art, 'ae_art_art.kultursByartId', [])\r\n  const artNodes = nodesPassed.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  const nodes = kulturen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'kultur',\r\n      filterTable: 'kultur',\r\n      id: `kultur${el.id}`,\r\n      parentId: `art${url[1]}KulturenFolder`,\r\n      label: get(el, 'gartenBygartenId.personBypersonId.name', '(kein Name)'),\r\n      url: ['Arten', url[1], 'Kulturen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, artIndex, 1, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'gartenFolder',\r\n    id: 'gartenFolder',\r\n    label: 'Gärten',\r\n    url: ['Gaerten'],\r\n    sort: [2],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const gaerten = get(data, 'hasura.garten', [])\r\n\r\n  const nodes = gaerten\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'garten',\r\n      filterTable: 'garten',\r\n      id: `garten${el.id}`,\r\n      parentId: 'gartenFolder',\r\n      label: get(el, 'personBypersonId.name', '(kein Garten gewählt)'),\r\n      url: ['Gaerten', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [2, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'herkunftFolder',\r\n    id: 'herkunftFolder',\r\n    label: 'Herkünfte',\r\n    url: ['Herkuenfte'],\r\n    sort: [3],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const herkuenfte = get(data, 'hasura.herkunft', [])\r\n\r\n  const nodes = herkuenfte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'herkunft',\r\n      filterTable: 'herkunft',\r\n      id: `herkunft${el.id}`,\r\n      parentId: 'herkunftFolder',\r\n      label: get(el, 'lokalname', '(keine Herkunft gewählt)'),\r\n      url: ['Herkuenfte', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    // sort by label\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [3, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'lieferungFolder',\r\n    id: 'lieferungFolder',\r\n    label: 'Lieferungen',\r\n    url: ['Lieferungen'],\r\n    sort: [4],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const lieferungen = get(data, 'hasura.lieferung', [])\r\n\r\n  const nodes = lieferungen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung',\r\n      filterTable: 'lieferung',\r\n      id: `lieferung${el.id}`,\r\n      parentId: 'lieferungFolder',\r\n      label: `${get(el, 'von_datum', '(kein von-Datum)')}: ${get(\r\n        el,\r\n        'personBypersonId.name',\r\n        '(keine Person)',\r\n      )}`,\r\n      url: ['Lieferungen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    // sort by label\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [4, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","// @flow\r\n\r\nexport default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'personFolder',\r\n    id: 'personFolder',\r\n    label: 'Personen',\r\n    url: ['Personen'],\r\n    sort: [5],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const personen = get(data, 'hasura.person', [])\r\n\r\n  const nodes = personen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'person',\r\n      filterTable: 'person',\r\n      id: `person${el.id}`,\r\n      parentId: 'personFolder',\r\n      label: get(el, 'name', '(kein Name)'),\r\n      url: ['Personen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [5, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'werteListenFolder',\r\n    id: 'werteListenFolder',\r\n    label: 'Werte-Listen',\r\n    url: ['Werte-Listen'],\r\n    sort: [6],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'masseinheitenFolder',\r\n    id: 'masseinheitenFolder',\r\n    parentId: 'werteListenFolder',\r\n    label: 'Masseinheiten',\r\n    url: ['Werte-Listen', 'Masseinheiten'],\r\n    sort: [6, 1],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const werte = get(data, 'hasura.masseinheit_werte', [])\r\n\r\n  const nodes = werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'masseinheit_werte',\r\n      filterTable: 'masseinheit_werte',\r\n      id: `masseinheit${el.id}`,\r\n      parentId: 'masseinheitenFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Masseinheiten', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 1, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'zaehleinheitenFolder',\r\n    id: 'zaehleinheitenFolder',\r\n    parentId: 'werteListenFolder',\r\n    label: 'Zähleinheiten',\r\n    url: ['Werte-Listen', 'Zaehleinheiten'],\r\n    sort: [6, 2],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const werte = get(data, 'hasura.zaehleinheit_werte', [])\r\n\r\n  const nodes = werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'zaehleinheit_werte',\r\n      filterTable: 'zaehleinheit_werte',\r\n      id: `zaehleinheit${el.id}`,\r\n      parentId: 'zaehleinheitenFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Zaehleinheiten', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 2, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","// @flow\r\n\r\nexport default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'lieferungTypFolder',\r\n    id: 'lieferungTypFolder',\r\n    parentId: 'werteListenFolder',\r\n    label: 'Lieferung: Typ',\r\n    url: ['Werte-Listen', 'Lieferung-Typ'],\r\n    sort: [6, 3],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_typ_werte', [])\r\n\r\n  const nodes = werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_typ_werte',\r\n      filterTable: 'lieferung_typ_werte',\r\n      id: `lieferungTyp${el.id}`,\r\n      parentId: 'lieferungTypFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Typ', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 3, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'lieferungStatusFolder',\r\n    id: 'lieferungStatusFolder',\r\n    parentId: 'werteListenFolder',\r\n    label: 'Lieferung: Status',\r\n    url: ['Werte-Listen', 'Lieferung-Status'],\r\n    sort: [6, 4],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_status_werte', [])\r\n\r\n  const nodes = werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_status_werte',\r\n      filterTable: 'lieferung_status_werte',\r\n      id: `lieferungStatus${el.id}`,\r\n      parentId: 'lieferungStatusFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Status', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 4, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","export default () => {\r\n  return {\r\n    nodeType: 'folder',\r\n    menuType: 'lieferungZwischenlagerFolder',\r\n    id: 'lieferungZwischenlagerFolder',\r\n    parentId: 'werteListenFolder',\r\n    label: 'Lieferung: Zwischenlager',\r\n    url: ['Werte-Listen', 'Lieferung-Zwischenlager'],\r\n    sort: [6, 5],\r\n    hasChildren: true,\r\n  }\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes: nodesPassed, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_zwischenlager_werte', [])\r\n\r\n  const nodes = werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_zwischenlager_werte',\r\n      filterTable: 'lieferung_zwischenlager_werte',\r\n      id: `lieferungZwischenlager${el.id}`,\r\n      parentId: 'lieferungZwischenlagerFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Zwischenlager', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodesPassed, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 5, index]\r\n      return el\r\n    })\r\n\r\n  return nodes\r\n}\r\n","import uniqBy from 'lodash/uniqBy'\r\n//import get from 'lodash/get'\r\n\r\nimport sort from '../sort'\r\nimport allParentNodesExist from '../allParentNodesExist'\r\nimport allParentNodesAreOpen from '../allParentNodesAreOpen'\r\nimport buildArtFolder from './art/artFolder'\r\nimport buildArtArt from './art/art'\r\nimport buildArtSammlungFolder from './art/sammlung/folder'\r\nimport buildArtSammlung from './art/sammlung'\r\nimport buildArtKulturFolder from './art/kultur/folder'\r\nimport buildArtKultur from './art/kultur'\r\nimport buildGartenFolder from './garten/gartenFolder'\r\nimport buildGartenGarten from './garten/garten'\r\nimport buildHerkunftFolder from './herkunft/herkunftFolder'\r\nimport buildHerkunftHerkunft from './herkunft/herkunft'\r\nimport buildLieferungFolder from './lieferung/lieferungFolder'\r\nimport buildLieferungLieferung from './lieferung/lieferung'\r\nimport buildPersonFolder from './person/personFolder'\r\nimport buildPersonPerson from './person/person'\r\nimport buildWerteListenFolder from './werteListen/werteListenFolder'\r\nimport buildWLMasseinheitFolder from './werteListen/masseinheitFolder'\r\nimport buildWLMasseinheitMasseinheit from './werteListen/masseinheit'\r\nimport buildWLZaehleinheitFolder from './werteListen/zaehleinheitFolder'\r\nimport buildWLZaehleinheitZaehleinheit from './werteListen/zaehleinheit'\r\nimport buildWLLieferungTypFolder from './werteListen/lieferungTypFolder'\r\nimport buildWLLieferungTypTyp from './werteListen/lieferungTyp'\r\nimport buildWLLieferungStatusFolder from './werteListen/lieferungStatusFolder'\r\nimport buildWLLieferungStatusStatus from './werteListen/lieferungStatus'\r\nimport buildWLLieferungZwischenlagerFolder from './werteListen/lieferungZwischenlagerFolder'\r\nimport buildWLLieferungZwischenlagerZwischenlager from './werteListen/lieferungZwischenlager'\r\n\r\nconst compare = (a, b) => {\r\n  // sort a before, if it has no value at this index\r\n  if (a !== 0 && !a) return -1\r\n  // sort a after if b has no value at this index\r\n  if (b !== 0 && !b) return 1\r\n  // sort a before if its value is smaller\r\n  return a - b\r\n}\r\n\r\nexport default ({ store, data }) => {\r\n  /*\r\n  const masseinheitWerte = get(data, 'hasura.masseinheit_werte', [])\r\n  const zaehleinheitWerte = get(data, 'hasura.zaehleinheit_werte', [])\r\n  const lieferungZwischenlagerWerte = get(\r\n    data,\r\n    'hasura.lieferung_zwischenlager_werte',\r\n    [],\r\n  )\r\n  const lieferungStatusWerte = get(data, 'hasura.lieferung_status_werte', [])\r\n  const lieferungTypWerte = get(data, 'hasura.lieferung_typ_werte', [])\r\n  */\r\n\r\n  let openNodes = store.tree.openNodes.sort(sort)\r\n\r\n  let nodes = [\r\n    buildArtFolder(),\r\n    buildGartenFolder(),\r\n    buildHerkunftFolder(),\r\n    buildLieferungFolder(),\r\n    buildPersonFolder(),\r\n    buildWerteListenFolder(),\r\n  ]\r\n\r\n  /**\r\n   * We ALWAYS add an array of nodes,\r\n   * never a single one\r\n   * not even for folders that are never more than one\r\n   * because the function adding the nodes\r\n   * should be able to pass none as well\r\n   * for instance if a parent node is not open\r\n   * or some filter is active\r\n   */\r\n  openNodes.forEach(url => {\r\n    if (!allParentNodesAreOpen(openNodes, url)) return\r\n    if (url.length === 1 && url[0] === 'Arten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtArt({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Gaerten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildGartenGarten({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Herkuenfte') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildHerkunftHerkunft({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Lieferungen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildLieferungLieferung({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Personen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildPersonPerson({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Werte-Listen') {\r\n      nodes = [\r\n        ...nodes,\r\n        buildWLMasseinheitFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        buildWLZaehleinheitFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        buildWLLieferungTypFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        buildWLLieferungStatusFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        buildWLLieferungZwischenlagerFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (url.length === 2 && url[0] === 'Arten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtSammlungFolder({\r\n          nodes,\r\n          url,\r\n        }),\r\n        ...buildArtKulturFolder({\r\n          nodes,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Zaehleinheiten'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLZaehleinheitZaehleinheit({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Status'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungStatusStatus({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Typ'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungTypTyp({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Zwischenlager'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungZwischenlagerZwischenlager({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Masseinheiten'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLMasseinheitMasseinheit({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (url.length === 3 && url[0] === 'Arten' && url[2] === 'Kulturen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtKultur({\r\n          nodes,\r\n          data,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 3 && url[0] === 'Arten' && url[2] === 'Sammlungen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtSammlung({\r\n          nodes,\r\n          data,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n  })\r\n\r\n  nodes = nodes.filter(n => allParentNodesExist(nodes, n))\r\n  /**\r\n   * There is something weird happening when filtering data\r\n   * that leads to duplicate nodes\r\n   * Need to solve that but in the meantime use uniqBy\r\n   */\r\n  nodes = uniqBy(nodes, n => n.url.join())\r\n\r\n  /**\r\n   * As all nodes are now in one flat list,\r\n   * we need to sort them\r\n   *\r\n   * This is the sorting algorithm:\r\n   *\r\n   * compare the sort array value in the nodes\r\n   * to determine sorting\r\n   *\r\n   * compare arrays element by element, starting with first\r\n   * if a has no value at this index (> a is folder), sort a before b\r\n   * if b has no value at this index (> b is folder), sort a after b\r\n   * if a is smaller than b, sort a before b\r\n   * if both array elements at this index are same,\r\n   * compare values at next index\r\n   *\r\n   * see: stackoverflow.com/questions/13211709/javascript-sort-array-by-multiple-number-fields\r\n   */\r\n  return nodes.sort(\r\n    (a, b) =>\r\n      compare(a.sort[0], b.sort[0]) ||\r\n      compare(a.sort[1], b.sort[1]) ||\r\n      compare(a.sort[2], b.sort[2]) ||\r\n      compare(a.sort[3], b.sort[3]) ||\r\n      compare(a.sort[4], b.sort[4]) ||\r\n      compare(a.sort[5], b.sort[5]) ||\r\n      compare(a.sort[6], b.sort[6]) ||\r\n      compare(a.sort[7], b.sort[7]) ||\r\n      compare(a.sort[8], b.sort[8]) ||\r\n      compare(a.sort[9], b.sort[9]) ||\r\n      compare(a.sort[10], b.sort[10]),\r\n  )\r\n}\r\n"],"sourceRoot":""}