{"version":3,"sources":["webpack:///./src/pages/Vermehrung/Tree/isNodeOpen.js","webpack:///./src/pages/Vermehrung/Tree/isNodeInActiveNodePath.js","webpack:///./src/pages/Vermehrung/Tree/openNode.js","webpack:///./src/pages/Vermehrung/Tree/toggleNode.js"],"names":["__webpack_require__","r","__webpack_exports__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default","n","openNodes","url","some","isEqual","node","activeNodeArray","activeNodeArrayPartWithEqualLength","slice","length","_reach_router__WEBPACK_IMPORTED_MODULE_0__","_isNodeOpen__WEBPACK_IMPORTED_MODULE_1__","_ref","setOpenNodes","store","tree","isNodeOpen","concat","navigate","join","_isNodeOpen__WEBPACK_IMPORTED_MODULE_0__","_isNodeInActiveNodePath__WEBPACK_IMPORTED_MODULE_1__","_openNode__WEBPACK_IMPORTED_MODULE_2__","Error","_store$tree","setActiveNodeArray","newActiveNodeArray","nodeIsOpen","isNodeInActiveNodePath","openNode"],"mappings":"oGAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAGeD,EAAA,iBAACI,EAAWC,GACzB,QAAKA,MACAD,GAEEA,EAAUE,KAAK,SAAAH,GAAC,OAAII,IAAQJ,EAAGE,yCCPxCP,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAEeD,EAAA,iBAACQ,EAAMC,GACpB,IAAKD,EAAM,OAAO,EAClB,IAAKA,EAAKH,IAAK,OAAO,EACtB,IAAKI,EAAiB,OAAO,EAC7B,IAAMC,EAAqCD,EAAgBE,MACzD,EACAH,EAAKH,IAAIO,QAEX,OAAOL,IAAQG,EAAoCF,EAAKH,wCCV1DP,EAAAC,EAAAC,GAAA,IAAAa,EAAAf,EAAA,IAAAgB,EAAAhB,EAAA,KAGeE,EAAA,iBAAAe,GAAgC,IAA7BP,EAA6BO,EAA7BP,KAAMJ,EAAuBW,EAAvBX,UACdY,EADqCD,EAAZE,MACFC,KAAvBF,aAGJG,kBAAWf,EAAWI,EAAKH,OAI/BW,EAFgB,GAAAI,OAAOhB,EAAP,CAAkBI,EAAKH,OAGvCgB,mBAAQ,eAAgBb,EAAKH,IAAIiB,KAAK,0CCZxCxB,EAAAC,EAAAC,GAAA,IAAAuB,EAAAzB,EAAA,KAAA0B,EAAA1B,EAAA,KAAA2B,EAAA3B,EAAA,KAIeE,EAAA,iBAAAe,GAAqB,IAAlBP,EAAkBO,EAAlBP,KAAMS,EAAYF,EAAZE,MACtB,IAAKT,EAAKH,IAAK,MAAM,IAAIqB,MAAM,0BADG,IAAAC,EAEyBV,EAAMC,KAAzDd,EAF0BuB,EAE1BvB,UAAWK,EAFekB,EAEflB,gBAAiBmB,EAFFD,EAEEC,mBAE9BC,EAAkB,GAAAT,OAAOZ,EAAKH,KAC9ByB,EAAaX,kBAAWf,EAAWI,EAAKH,KAC1CyB,GAAcC,kBAAuBvB,EAAMC,IAEzCD,EAAKH,IAAIO,OAAWH,EAAgBG,QAQ9BkB,GACVE,kBAAS,CAAExB,OAAMJ,YAAWa,UAG9BW,EAAmBC","file":"component---src-pages-vermehrung-tree-toggle-node-js-e11d8eac01f52aceebcc.js","sourcesContent":["// @flow\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nexport default (openNodes, url) => {\r\n  if (!url) return false\r\n  if (!openNodes) return false\r\n\r\n  return openNodes.some(n => isEqual(n, url))\r\n}\r\n","import isEqual from 'lodash/isEqual'\r\n\r\nexport default (node, activeNodeArray) => {\r\n  if (!node) return false\r\n  if (!node.url) return false\r\n  if (!activeNodeArray) return false\r\n  const activeNodeArrayPartWithEqualLength = activeNodeArray.slice(\r\n    0,\r\n    node.url.length,\r\n  )\r\n  return isEqual(activeNodeArrayPartWithEqualLength, node.url)\r\n}\r\n","import { navigate } from '@reach/router'\r\nimport isNodeOpen from './isNodeOpen'\r\n\r\nexport default ({ node, openNodes, store }) => {\r\n  const { setOpenNodes } = store.tree\r\n  // make sure this node's url is not yet contained\r\n  // otherwise same nodes will be added multiple times!\r\n  if (isNodeOpen(openNodes, node.url)) return\r\n\r\n  let newOpenNodes = [...openNodes, node.url]\r\n\r\n  setOpenNodes(newOpenNodes)\r\n  navigate(`/Vermehrung/${node.url.join('/')}`)\r\n}\r\n","import isNodeOpen from './isNodeOpen'\r\nimport isNodeInActiveNodePath from './isNodeInActiveNodePath'\r\nimport openNode from './openNode'\r\n\r\nexport default ({ node, store }) => {\r\n  if (!node.url) throw new Error('passed node has no url')\r\n  const { openNodes, activeNodeArray, setActiveNodeArray } = store.tree\r\n\r\n  const newActiveNodeArray = [...node.url]\r\n  const nodeIsOpen = isNodeOpen(openNodes, node.url)\r\n  if (nodeIsOpen && isNodeInActiveNodePath(node, activeNodeArray)) {\r\n    // need to check if node is last in activeNodePath\r\n    if (node.url.length === activeNodeArray.length) {\r\n      /**\r\n       * dont do anything:\r\n       * klicked node should always be / remain active\r\n       */\r\n    } else {\r\n      // leave newActiveNodeArray as it is\r\n    }\r\n  } else if (!nodeIsOpen) {\r\n    openNode({ node, openNodes, store })\r\n  }\r\n\r\n  setActiveNodeArray(newActiveNodeArray)\r\n}\r\n"],"sourceRoot":""}