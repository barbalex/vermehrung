# HTTP routes configured on the Gateway
# -------------------------------------
# This section lets you define the mapping between HTTP(S) routes on your domain(s) ond
# the microservices running on your cluster
#
# The standard convention is to expose a microservice on a subdomain. The
# default services (data, auth, filestore, notify etc.) on the platform are
# exposed on their respective subdomains.
#
# Syntax
# ------
# The configuration syntax is fairly simple. It is a simple array of subdomain configurations
#
# So, the structure of this file looks like this:
#
# - subdomain: subdomain1
#   paths:
#   - {path1 configuration}
# - subdomain: subdomain2
#   paths:
#   - {path1 configuration}
# .
# .
#
# > Path's Configuration
#   -----------------------
#   Each path's configuration is a map. The path key defines the path
#   and the other key-value pairs define corresponding location
#   configuration. This lets you define the action that the gateway needs
#   to take when the location is matched.
#
#   A location/path is the part of the url after the domain. For example:
#   In https://data.hello99.hasura-app.io/v1/query, /v1/query is the path
#
#   Example 1:
#
#   - subdomain: data
#     paths:
#     - path: /
#       upstreamService:
#         name: data
#         namespace: {{ cluster.metadata.namespaces.hasura }}
#         path: /
#         port: 80
#
#   Here, we are configuring the gateway to send any request on data
#   subdomain to the 'data' microservice in the hasura  namespace if
#   the location has a prefix '/'. Since every location starts with
#   '/', this means that any request arriving on the data subdomain
#   is received by the data microservice.
#
#   Example 2:
#
#   - subdomain: api
#     paths:
#     - path: /shipping
#       upstreamService:
#         name: shipping
#         namespace: {{ cluster.metadata.namespaces.user }}
#         path: /
#         port: 80
#     - path: /recommed
#       upstreamService:
#         name: recommend
#         namespace: {{ cluster.metadata.namespaces.user }}
#         path: /
#         port: 80
#
#   Here, anything on api.hello99.hasura-app.io/shipping/* -> shipping/
#                     api.hello99.hasura-app.io/recommend/* -> recommend/
#
#   NOTE:
#   1. Since the convention is to deploy a microservice on each subdomain, you'll rarely
#      see a configuration which has path other than '/'
#   2. If in case the path matches to more than one rule, the configuration
#      related to the more specific rule is used
#
# > Path Configuration
#   ----------------------
#   The following options are available:
#   key                  required            default
#   ------------------------------------------------
#   upstreamService      Yes                 -
#   enableAuth           No                  true
#   authorizationPolicy  No                  null
#   corsPolicy           No                  []
#   enableWebsockets     No                  true
#   locationDirectives   No                  ""
#
#   - upstreamService:
#       The service to forward the request to
#   - upstreamService.name:
#       The name of microservice to direct upstream traffic
#   - upstreamService.namespace:
#       The namespace of microservice
#   - upstreamService.port:
#       The port on which the service is running
#   - upstreamService.path:
#       The path to which the request has to be forwarded
#   - enableAuth:
#       This enables the session middlaware on the gateway to intercept the
#       request and resolve the user's session based on Authorization header
#       or the Cookie
#   - authorizationPolicy:
#       This can be used to restrict access to a microservice when the  microservice
#       is not aware of users or roles. For example, let's say you want to run some
#       analytics service (pghero) that should only be allowed for admins:
#
#       - subdomain: pghero
#         paths:
#         - path: /
#           upstreamService:
#             name: pghero
#             namespace: {{ cluster.metadata.namespaces.user }}
#             path: /
#             port: 80
#           authorizationPolicy:
#             restrictToRoles: ["admin"]
#
#       With this conf, only logged in users with the role admin can access 'pghero' service
#
#       Now we need a need a way for the admins to login so that they can access this service.
#       The auth service has a ui-kit that can be used for this purpose.
#
#       - subdomain: pghero
#         paths:
#         - path: /
#           upstreamService:
#             name: pghero
#             namespace: {{ cluster.metadata.namespaces.user }}
#             path: /
#             port: 80
#           authorizationPolicy:
#             restrictToRoles: ["admin"]
#             noSessionRedirectUrl: https://auth.{{ cluster.name }}.hasura-app.io/ui/
#
#       So if there is no session, the gateway redirects the user to the auth serivce's ui to login
#
#       Sometimes, additionally we may want to redirect users which do not have access to this page
#
#       - subdomain: pghero
#         paths:
#         - path: /
#           upstreamService:
#             name: pghero
#             namespace: {{ cluster.metadata.namespaces.user }}
#             path: /
#             port: 80
#           authorizationPolicy:
#             restrictToRoles: ["admin"]
#             noSessionRedirectUrl: https://auth.{{ cluster.name }}.hasura-app.io/ui/
#             noAccessRedirectUrl: https://auth.{{ cluster.name }}.hasura-app.io/ui/restricted
#
#   - corsPolicy:
#       Can take the following 3 values:
#       1. "allow_all": Cross origin requests from any domain are allowed
#          Eg. corsPolicy: allow_all
#       2. "upstream" : The upstream service should handle CORS requests.
#          Eg. corsPolicy: upstream
#       3. Array of allowed origins: This allows the listed origins along
#          with all the subdomains on the current domain to make CORS requests.
#   - enableWebsockets:
#       Whether to allow websockets
#   - locationDirectives:
#       (Advanced) Additional nginx directives that need to go into the
#       location block

- subdomain: auth
  paths:
  - path: /
    upstreamService:
      name: auth
      namespace: {{ cluster.metadata.namespaces.hasura }}
      path: /
      port: 80
    corsPolicy: allow_all

- subdomain: data
  paths:
  - path: /
    upstreamService:
      name: data
      namespace: {{ cluster.metadata.namespaces.hasura }}
      path: /
      port: 80
    corsPolicy: allow_all

- subdomain: filestore
  paths:
  - path: /
    upstreamService:
      name: filestore
      namespace: {{ cluster.metadata.namespaces.hasura }}
      path: /
      port: 80
    corsPolicy: allow_all
    locationDirectives: |
      proxy_request_buffering off;
      client_max_body_size 100M;

- subdomain: notify
  paths:
  - path: /
    upstreamService:
      name: notify
      namespace: {{ cluster.metadata.namespaces.hasura }}
      path: /
      port: 80
    corsPolicy: allow_all
