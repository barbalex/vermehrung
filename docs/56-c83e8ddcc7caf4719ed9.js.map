{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/extends.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack:///./node_modules/ansi-colors/index.js","webpack:///./node_modules/ansi-colors/symbols.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/memoize-one/esm/index.js","webpack:///./node_modules/react-window/dist/index.esm.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","__webpack_require__","d","__webpack_exports__","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_inheritsLoose","subClass","superClass","create","constructor","__proto__","colors","enabled","visible","styles","FORCE_COLOR","wrap","style","str","nl","open","close","regex","includes","replace","define","name","codes","type","RegExp","ansi","push","Reflect","defineProperty","[object Object]","color","input","stack","n","setPrototypeOf","concat","re","ansiRegex","hasColor","hasAnsi","lastIndex","test","unstyle","none","clear","noop","stripColor","symbols","module","exports","process","isWindows","platform","isLinux","windows","bullet","check","cross","ellipsis","heart","info","line","middot","minus","plus","question","questionSmall","pointer","pointerSmall","warning","other","ballotCross","questionFull","enumerable","value","_assertThisInitialized","self","ReferenceError","simpleIsEqual","a","b","esm","resultFn","isEqual","undefined","lastThis","lastArgs","lastResult","calledOnce","isNewArgEqualToLast","newArg","index","_len","newArgs","Array","_key","every","FixedSizeList","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","IS_SCROLLING_DEBOUNCE_INTERVAL$1","defaultItemKey$1","data","createListComponent","_ref","_class","_temp","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_PureComponent","List","props","_this","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","state","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","_this$props","direction","itemSize","itemStyleCache","_getItemStyleCache","_offset","size","position","left","top","height","width","_","__","_onScrollHorizontal","event","scrollLeft","currentTarget","setState","prevState","_resetIsScrollingDebounced","_onScrollVertical","scrollTop","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","inheritsLoose","getDerivedStateFromProps","validateSharedProps$1","_proto","scrollTo","scrollToItem","align","componentDidMount","_this$props2","_callPropsCallbacks","componentDidUpdate","_this$state","componentWillUnmount","render","_this$props3","children","className","innerRef","innerElementType","innerTagName","itemCount","itemData","_this$props3$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_this$_getRangeToRend","_getRangeToRender","startIndex","stopIndex","items","_index","react","estimatedTotalSize","esm_extends","overflow","WebkitOverflowScrolling","willChange","pointerEvents","_this$_getRangeToRend2","_overscanStartIndex","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_this$state2","_scrollDirection","_scrollOffset","_scrollUpdateWasRequested","_this$props4","overscanCount","_this$state3","overscanBackward","Math","max","overscanForward","min","defaultProps","_ref2","_ref3","_ref4","maxOffset","minOffset","round","_ref5","offset","floor","_ref6","_ref7"],"mappings":"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","file":"56-c83e8ddcc7caf4719ed9.js","sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","'use strict';\n\nconst colors = { enabled: true, visible: true, styles: {}, keys: {} };\n\nif ('FORCE_COLOR' in process.env) {\n  colors.enabled = process.env.FORCE_COLOR !== '0';\n}\n\nconst ansi = style => {\n  style.open = `\\u001b[${style.codes[0]}m`;\n  style.close = `\\u001b[${style.codes[1]}m`;\n  style.regex = new RegExp(`\\\\u001b\\\\[${style.codes[1]}m`, 'g');\n  return style;\n};\n\nconst wrap = (style, str, nl) => {\n  let { open, close, regex } = style;\n  str = open + (str.includes(close) ? str.replace(regex, close + open) : str) + close;\n  // see https://github.com/chalk/chalk/pull/92, thanks to the\n  // chalk contributors for this fix. However, we've confirmed that\n  // this issue is also present in Windows terminals\n  return nl ? str.replace(/\\r?\\n/g, `${close}$&${open}`) : str;\n};\n\nconst style = (input, stack) => {\n  if (input === '' || input == null) return '';\n  if (colors.enabled === false) return input;\n  if (colors.visible === false) return '';\n  let str = '' + input;\n  let nl = str.includes('\\n');\n  let n = stack.length;\n  while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);\n  return str;\n};\n\nconst define = (name, codes, type) => {\n  colors.styles[name] = ansi({ name, codes });\n  let t = colors.keys[type] || (colors.keys[type] = []);\n  t.push(name);\n\n  Reflect.defineProperty(colors, name, {\n    get() {\n      let color = input => style(input, color.stack);\n      Reflect.setPrototypeOf(color, colors);\n      color.stack = this.stack ? this.stack.concat(name) : [name];\n      return color;\n    }\n  });\n};\n\ndefine('reset', [0, 0], 'modifier');\ndefine('bold', [1, 22], 'modifier');\ndefine('dim', [2, 22], 'modifier');\ndefine('italic', [3, 23], 'modifier');\ndefine('underline', [4, 24], 'modifier');\ndefine('inverse', [7, 27], 'modifier');\ndefine('hidden', [8, 28], 'modifier');\ndefine('strikethrough', [9, 29], 'modifier');\n\ndefine('black', [30, 39], 'color');\ndefine('red', [31, 39], 'color');\ndefine('green', [32, 39], 'color');\ndefine('yellow', [33, 39], 'color');\ndefine('blue', [34, 39], 'color');\ndefine('magenta', [35, 39], 'color');\ndefine('cyan', [36, 39], 'color');\ndefine('white', [37, 39], 'color');\ndefine('gray', [90, 39], 'color');\ndefine('grey', [90, 39], 'color');\n\ndefine('bgBlack', [40, 49], 'bg');\ndefine('bgRed', [41, 49], 'bg');\ndefine('bgGreen', [42, 49], 'bg');\ndefine('bgYellow', [43, 49], 'bg');\ndefine('bgBlue', [44, 49], 'bg');\ndefine('bgMagenta', [45, 49], 'bg');\ndefine('bgCyan', [46, 49], 'bg');\ndefine('bgWhite', [47, 49], 'bg');\n\ndefine('blackBright', [90, 39], 'bright');\ndefine('redBright', [91, 39], 'bright');\ndefine('greenBright', [92, 39], 'bright');\ndefine('yellowBright', [93, 39], 'bright');\ndefine('blueBright', [94, 39], 'bright');\ndefine('magentaBright', [95, 39], 'bright');\ndefine('cyanBright', [96, 39], 'bright');\ndefine('whiteBright', [97, 39], 'bright');\n\ndefine('bgBlackBright', [100, 49], 'bgBright');\ndefine('bgRedBright', [101, 49], 'bgBright');\ndefine('bgGreenBright', [102, 49], 'bgBright');\ndefine('bgYellowBright', [103, 49], 'bgBright');\ndefine('bgBlueBright', [104, 49], 'bgBright');\ndefine('bgMagentaBright', [105, 49], 'bgBright');\ndefine('bgCyanBright', [106, 49], 'bgBright');\ndefine('bgWhiteBright', [107, 49], 'bgBright');\n\n/* eslint-disable no-control-regex */\nconst re = colors.ansiRegex = /\\u001b\\[\\d+m/gm;\ncolors.hasColor = colors.hasAnsi = str => {\n  re.lastIndex = 0;\n  return !!str && typeof str === 'string' && re.test(str);\n};\n\ncolors.unstyle = str => {\n  re.lastIndex = 0;\n  return typeof str === 'string' ? str.replace(re, '') : str;\n};\n\ncolors.none = colors.clear = colors.noop = str => str; // no-op, for programmatic usage\ncolors.stripColor = colors.unstyle;\ncolors.symbols = require('./symbols');\ncolors.define = define;\nmodule.exports = colors;\n","'use strict';\n\nconst isWindows = process.platform === 'win32';\nconst isLinux = process.platform === 'linux';\n\nconst windows = {\n  bullet: '•',\n  check: '√',\n  cross: '×',\n  ellipsis: '...',\n  heart: '❤',\n  info: 'i',\n  line: '─',\n  middot: '·',\n  minus: '－',\n  plus: '＋',\n  question: '?',\n  questionSmall: '﹖',\n  pointer: '>',\n  pointerSmall: '»',\n  warning: '‼'\n};\n\nconst other = {\n  ballotCross: '✘',\n  bullet: '•',\n  check: '✔',\n  cross: '✖',\n  ellipsis: '…',\n  heart: '❤',\n  info: 'ℹ',\n  line: '─',\n  middot: '·',\n  minus: '－',\n  plus: '＋',\n  question: '?',\n  questionFull: '？',\n  questionSmall: '﹖',\n  pointer: isLinux ? '▸' : '❯',\n  pointerSmall: isLinux ? '‣' : '›',\n  warning: '⚠'\n};\n\nmodule.exports = isWindows ? windows : other;\nReflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });\nReflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","\n\nvar simpleIsEqual = function simpleIsEqual(a, b) {\n  return a === b;\n};\n\nexport default function (resultFn) {\n  var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleIsEqual;\n\n  var lastThis = void 0;\n  var lastArgs = [];\n  var lastResult = void 0;\n  var calledOnce = false;\n\n  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {\n    return isEqual(newArg, lastArgs[index]);\n  };\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {\n      return lastResult;\n    }\n\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    lastResult = resultFn.apply(this, newArgs);\n    return lastResult;\n  };\n\n  return result;\n}","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n};\n\nfunction createGridComponent(_ref2) {\n  var _class, _temp;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var key = rowIndex + \":\" + columnIndex;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && _this.props.columnWidth, shouldResetStyleCacheOnItemSizeChange && _this.props.rowHeight);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: getColumnOffset(_this.props, columnIndex, _this._instanceProps),\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      this.scrollTo({\n        scrollLeft: getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps),\n        scrollTop: getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps)\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props = this.props,\n          initialScrollLeft = _this$props.initialScrollLeft,\n          initialScrollTop = _this$props.initialScrollTop;\n\n      if (typeof initialScrollLeft === 'number' && this._outerRef != null) {\n        this._outerRef.scrollLeft = initialScrollLeft;\n      }\n\n      if (typeof initialScrollTop === 'number' && this._outerRef != null) {\n        this._outerRef.scrollTop = initialScrollTop;\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef !== null) {\n        this._outerRef.scrollLeft = scrollLeft;\n        this._outerRef.scrollTop = scrollTop;\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          innerRef = _this$props2.innerRef,\n          innerElementType = _this$props2.innerElementType,\n          innerTagName = _this$props2.innerTagName,\n          itemData = _this$props2.itemData,\n          _this$props2$itemKey = _this$props2.itemKey,\n          itemKey = _this$props2$itemKey === void 0 ? defaultItemKey : _this$props2$itemKey,\n          outerElementType = _this$props2.outerElementType,\n          outerTagName = _this$props2.outerTagName,\n          rowCount = _this$props2.rowCount,\n          style = _this$props2.style,\n          useIsScrolling = _this$props2.useIsScrolling,\n          width = _this$props2.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform'\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : '',\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props3 = this.props,\n          columnCount = _this$props3.columnCount,\n          onItemsRendered = _this$props3.onItemsRendered,\n          onScroll = _this$props3.onScroll,\n          rowCount = _this$props3.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props4 = this.props,\n          columnCount = _this$props4.columnCount,\n          overscanColumnsCount = _this$props4.overscanColumnsCount,\n          overscanCount = _this$props4.overscanCount,\n          rowCount = _this$props4.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          overscanCount = _this$props5.overscanCount,\n          overscanRowsCount = _this$props5.overscanRowsCount,\n          rowCount = _this$props5.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    itemData: undefined,\n    useIsScrolling: false\n  }, _temp;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5) {\n  var children = _ref5.children,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanCount = _ref5.overscanCount,\n      width = _ref5.width;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnsCount and overscanRowsCount props instead.');\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0;\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0;\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (scrollOffset - minOffset < maxOffset - scrollOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid =\n/*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n};\n\nfunction createListComponent(_ref) {\n  var _class, _temp;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps);\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: direction === 'horizontal' ? _offset : 0,\n            top: direction === 'vertical' ? _offset : 0,\n            height: direction === 'vertical' ? size : '100%',\n            width: direction === 'horizontal' ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var scrollLeft = event.currentTarget.scrollLeft;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollLeft,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var scrollTop = event.currentTarget.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollTop ? 'forward' : 'backward',\n            scrollOffset: scrollTop,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n      validateSharedProps$1(props);\n      validateProps(props);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      this.setState(function (prevState) {\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var scrollOffset = this.state.scrollOffset;\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n          initialScrollOffset = _this$props2.initialScrollOffset,\n          direction = _this$props2.direction;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef !== null) {\n        if (direction === 'horizontal') {\n          this._outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          this._outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef !== null) {\n        if (direction === 'horizontal') {\n          this._outerRef.scrollLeft = scrollOffset;\n        } else {\n          this._outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          className = _this$props3.className,\n          direction = _this$props3.direction,\n          height = _this$props3.height,\n          innerRef = _this$props3.innerRef,\n          innerElementType = _this$props3.innerElementType,\n          innerTagName = _this$props3.innerTagName,\n          itemCount = _this$props3.itemCount,\n          itemData = _this$props3.itemData,\n          _this$props3$itemKey = _this$props3.itemKey,\n          itemKey = _this$props3$itemKey === void 0 ? defaultItemKey$1 : _this$props3$itemKey,\n          outerElementType = _this$props3.outerElementType,\n          outerTagName = _this$props3.outerTagName,\n          style = _this$props3.style,\n          useIsScrolling = _this$props3.useIsScrolling,\n          width = _this$props3.width;\n      var isScrolling = this.state.isScrolling;\n      var onScroll = direction === 'vertical' ? this._onScrollVertical : this._onScrollHorizontal;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform'\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: direction === 'horizontal' ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : '',\n          width: direction === 'horizontal' ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props4 = this.props,\n          itemCount = _this$props4.itemCount,\n          overscanCount = _this$props4.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'vertical',\n    itemData: undefined,\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _temp;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n    }\n\n    if (direction !== 'horizontal' && direction !== 'vertical') {\n      throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (direction === 'horizontal' && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (direction === 'vertical' && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0;\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList =\n/*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        width = props.width;\n    var size = direction === 'horizontal' ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset - minOffset < maxOffset - scrollOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        width = props.width;\n    var size = direction === 'horizontal' ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeGrid =\n/*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var maxOffset = Math.max(0, Math.min(columnCount * columnWidth - width, columnIndex * columnWidth));\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + columnWidth);\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (scrollLeft - minOffset < maxOffset - scrollLeft) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var maxOffset = Math.max(0, Math.min(rowCount * rowHeight - height, rowIndex * rowHeight));\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + rowHeight);\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (scrollTop - minOffset < maxOffset - scrollTop) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    return Math.max(0, Math.min(columnCount - 1, startIndex + Math.floor((width + (scrollLeft - left)) / columnWidth)));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var left = startIndex * rowHeight;\n    return Math.max(0, Math.min(rowCount - 1, startIndex + Math.floor((height + (scrollTop - left)) / rowHeight)));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeList =\n/*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize,\n        size = _ref.size;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize,\n        size = _ref2.size;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        width = _ref4.width;\n    var size = direction === 'horizontal' ? width : height;\n    var maxOffset = Math.max(0, Math.min(itemCount * itemSize - size, index * itemSize));\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset - minOffset < maxOffset - scrollOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        width = _ref6.width;\n    var offset = startIndex * itemSize;\n    var size = direction === 'horizontal' ? width : height;\n    return Math.max(0, Math.min(itemCount - 1, startIndex + Math.floor((size + (scrollOffset - offset)) / itemSize)));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, [\"style\"]);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, [\"style\"]);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { VariableSizeGrid, VariableSizeList, FixedSizeGrid, FixedSizeList, areEqual, shouldComponentUpdate };\n"],"sourceRoot":""}