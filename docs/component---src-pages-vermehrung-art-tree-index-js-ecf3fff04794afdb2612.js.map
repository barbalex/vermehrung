{"version":3,"sources":["webpack:///./src/pages/Vermehrung/ArtTree/Tree/index.js","webpack:///./src/pages/Vermehrung/ArtTree/index.js","webpack:///./src/components/ErrorBoundary.js","webpack:///./node_modules/mobx-react-lite/dist/index.module.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__","observer","a","createElement","styled_components__WEBPACK_IMPORTED_MODULE_1__","mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__","_components_ErrorBoundary__WEBPACK_IMPORTED_MODULE_3__","_Tree__WEBPACK_IMPORTED_MODULE_4__","Container","styled","div","withConfig","displayName","componentId","InnerTreeContainer","ErrorTitle","ReloadButton","Button","ErrorBoundary","props","_this","_Component","call","this","state","error","getDerivedStateFromError","render","_this2","console","log","react__WEBPACK_IMPORTED_MODULE_2___default","message","variant","onClick","window","location","reload","children","React","Children","map","child","cloneElement","Object","assign","Component","d","mobx__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","Error","globalIsUsingStaticRendering","isUsingStaticRendering","EMPTY_ARRAY","useObserver","fn","baseComponentName","forceUpdate","tick","setTick","useForceUpdate","reaction","rendering","useUnmount","current","dispose","track","baseComponent","options","realOptions","forwardRef","name","wrappedComponent","ref","memoComponent","ObserverComponent","component","ObserverPropsCheck","key","componentName","propFullName","extraKey","hasProp","hasExtraProp","propTypes"],"mappings":"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","file":"component---src-pages-vermehrung-art-tree-index-js-ecf3fff04794afdb2612.js","sourcesContent":["import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst Tree = () => {\r\n  return <div>TODO Tree</div>\r\n}\r\n\r\nexport default observer(Tree)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nimport ErrorBoundary from '../../../components/ErrorBoundary'\r\nimport Tree from './Tree'\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  border-right-color: rgb(46, 125, 50);\r\n  border-right-width: 1px;\r\n  border-right-style: solid;\r\n  border-left-color: rgb(46, 125, 50);\r\n  border-left-width: 1px;\r\n  border-left-style: solid;\r\n  overflow: hidden;\r\n  @media print {\r\n    display: none !important;\r\n  }\r\n`\r\nconst InnerTreeContainer = styled.div`\r\n  height: 100%;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ArtTree = () => {\r\n  return (\r\n    <ErrorBoundary>\r\n      <Container>\r\n        <InnerTreeContainer>\r\n          <Tree />\r\n        </InnerTreeContainer>\r\n      </Container>\r\n    </ErrorBoundary>\r\n  )\r\n}\r\n\r\nexport default observer(ArtTree)\r\n","// @flow\r\nimport React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst Container = styled.div`\r\n  margin: 10px;\r\n`\r\nconst ErrorTitle = styled.div`\r\n  margin-bottom: 10px;\r\n`\r\nconst ReloadButton = styled(Button)`\r\n  margin-top: 10px !important;\r\n`\r\n\r\nclass ErrorBoundary extends Component {\r\n  static getDerivedStateFromError(error) {\r\n    // Catch errors in any components below and re-render with error message\r\n    return {\r\n      error,\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { error: null }\r\n  }\r\n\r\n  render() {\r\n    const { error } = this.state\r\n    if (error) {\r\n      console.log('error:', error)\r\n      return (\r\n        <Container>\r\n          <ErrorTitle>\r\n            Oh je, es ist ein Fehler aufgetreten! Bericht:\r\n          </ErrorTitle>\r\n          <div>{error.message}</div>\r\n          <ReloadButton\r\n            variant=\"outlined\"\r\n            onClick={() => {\r\n              typeof window !== 'undefined' && window.location.reload(false)\r\n            }}\r\n          >\r\n            Neu laden\r\n          </ReloadButton>\r\n        </Container>\r\n      )\r\n    }\r\n    const { children } = this.props\r\n    var childrenWithProps = React.Children.map(children, child =>\r\n      React.cloneElement(child, { ...this.props }),\r\n    )\r\n\r\n    // Normally, just render children\r\n    // and pass all props\r\n    return childrenWithProps\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import { spy, observable, Reaction, computed } from 'mobx';\nimport { useState, useRef, useMemo, useEffect, useCallback, forwardRef, memo } from 'react';\n\nif (!useState) {\r\n    throw new Error(\"mobx-react-lite requires React with Hooks support (alpha versions)\");\r\n}\r\nif (!spy) {\r\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\");\r\n}\n\nfunction useObservable(initialValue) {\r\n    return useRef(observable(initialValue)).current;\r\n}\n\nfunction useComputed(func, inputs = []) {\r\n    const computed$$1 = useMemo(() => computed(func), inputs);\r\n    return computed$$1.get();\r\n}\n\n/**\r\n * Adds an observable effect (reaction, autorun, or anything else that returns a disposer) that will be registered upon component creation and disposed upon unmounting.\r\n * Returns the generated disposer for early disposal.\r\n *\r\n * @export\r\n * @template D\r\n * @param {() => D} disposerGenerator A function that returns the disposer of the wanted effect.\r\n * @param {ReadonlyArray<any>} [inputs=[]] If you want the effect to be automatically re-created when some variable(s) are changed then pass them in this array.\r\n * @returns {D}\r\n */\r\nfunction useDisposable(disposerGenerator, inputs = []) {\r\n    const disposerRef = useRef(undefined);\r\n    useMemo(() => {\r\n        disposerRef.current = disposerGenerator();\r\n    }, inputs);\r\n    useEffect(() => () => {\r\n        if (disposerRef.current && typeof disposerRef.current === \"function\") {\r\n            disposerRef.current();\r\n        }\r\n    }, inputs);\r\n    return disposerRef.current;\r\n}\n\n/**\r\n * Adds an observable effect (reaction, autorun, or anything else that returns a disposer) that will be registered upon component creation and disposed upon unmounting.\r\n * Returns the generated disposer for early disposal.\r\n *\r\n * @deprecated Renamed to useDisposable for a more universal use\r\n * @export\r\n * @template D\r\n * @param {() => D} disposerGenerator A function that returns the disposer of the wanted effect.\r\n * @param {ReadonlyArray<any>} [inputs=[]] If you want the effect to be automatically re-created when some variable(s) are changed then pass them in this array.\r\n * @returns {D}\r\n */\r\nfunction useObservableEffect(disposerGenerator, inputs = []) {\r\n    return useDisposable(disposerGenerator, inputs);\r\n}\n\nlet globalIsUsingStaticRendering = false;\r\nfunction useStaticRendering(enable) {\r\n    globalIsUsingStaticRendering = enable;\r\n}\r\nfunction isUsingStaticRendering() {\r\n    return globalIsUsingStaticRendering;\r\n}\n\nconst EMPTY_ARRAY = [];\r\nfunction useUnmount(fn) {\r\n    useEffect(() => fn, EMPTY_ARRAY);\r\n}\n\nfunction useForceUpdate() {\r\n    const [tick, setTick] = useState(1);\r\n    const update = useCallback(() => {\r\n        setTick(tick + 1);\r\n    }, []);\r\n    return update;\r\n}\r\nfunction useObserver(fn, baseComponentName = \"observed\") {\r\n    if (isUsingStaticRendering()) {\r\n        return fn();\r\n    }\r\n    // forceUpdate 2.0\r\n    const forceUpdate = useForceUpdate();\r\n    const reaction = useRef(new Reaction(`observer(${baseComponentName})`, () => {\r\n        forceUpdate();\r\n    }));\r\n    useUnmount(() => {\r\n        reaction.current.dispose();\r\n    });\r\n    // render the original component, but have the\r\n    // reaction track the observables, so that rendering\r\n    // can be invalidated (see above) once a dependency changes\r\n    let rendering;\r\n    reaction.current.track(() => {\r\n        rendering = fn();\r\n    });\r\n    return rendering;\r\n}\n\n// n.b. base case is not used for actual typings or exported in the typing files\r\nfunction observer(baseComponent, options) {\r\n    // The working of observer is explaind step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\r\n    if (isUsingStaticRendering()) {\r\n        return baseComponent;\r\n    }\r\n    const realOptions = Object.assign({ forwardRef: false }, options);\r\n    const baseComponentName = baseComponent.displayName || baseComponent.name;\r\n    const wrappedComponent = (props, ref) => {\r\n        return useObserver(() => baseComponent(props, ref), baseComponentName);\r\n    };\r\n    // memo; we are not intested in deep updates\r\n    // in props; we assume that if deep objects are changed,\r\n    // this is in observables, which would have been tracked anyway\r\n    let memoComponent;\r\n    if (realOptions.forwardRef) {\r\n        // we have to use forwardRef here because:\r\n        // 1. it cannot go before memo, only after it\r\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\r\n        //    since it wouldn't be a callable function anymore\r\n        memoComponent = memo(forwardRef(wrappedComponent));\r\n    }\r\n    else {\r\n        memoComponent = memo(wrappedComponent);\r\n    }\r\n    memoComponent.displayName = baseComponentName;\r\n    return memoComponent;\r\n}\n\nfunction ObserverComponent({ children, render }) {\r\n    const component = children || render;\r\n    if (typeof component !== \"function\") {\r\n        return null;\r\n    }\r\n    return useObserver(component);\r\n}\r\nObserverComponent.propTypes = {\r\n    children: ObserverPropsCheck,\r\n    render: ObserverPropsCheck\r\n};\r\nObserverComponent.displayName = \"Observer\";\r\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\r\n    const extraKey = key === \"children\" ? \"render\" : \"children\";\r\n    const hasProp = typeof props[key] === \"function\";\r\n    const hasExtraProp = typeof props[extraKey] === \"function\";\r\n    if (hasProp && hasExtraProp) {\r\n        return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\r\n    }\r\n    if (hasProp || hasExtraProp) {\r\n        return null;\r\n    }\r\n    return new Error(\"Invalid prop `\" +\r\n        propFullName +\r\n        \"` of type `\" +\r\n        typeof props[key] +\r\n        \"` supplied to\" +\r\n        \" `\" +\r\n        componentName +\r\n        \"`, expected `function`.\");\r\n}\n\nexport { useObservable, useComputed, useDisposable, useObservableEffect, isUsingStaticRendering, useStaticRendering, observer, useObserver, ObserverComponent as Observer };\n"],"sourceRoot":""}