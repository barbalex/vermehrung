{"version":3,"sources":["webpack:///./src/pages/Vermehrung/Tree/isNodeOpen.js","webpack:///./src/pages/Vermehrung/Tree/allParentNodesAreOpen.js"],"names":["__webpack_require__","r","__webpack_exports__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default","n","openNodes","url","some","console","log","nodeIsOpen","isEqual","_isNodeOpen__WEBPACK_IMPORTED_MODULE_0__","nodePassed","parentNodes","node","concat","i","length","push","slice","filter","every","isNodeOpen"],"mappings":"8FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAEeD,EAAA,iBAACI,EAAWC,GACzB,IAAKA,EAAK,OAAO,EACjB,IAAKD,EAAW,OAAO,EACvB,IAAKA,EAAUE,KAAM,OAAO,EAE5BC,QAAQC,IAAI,sBACZ,IAAMC,EAAaL,EAAUE,KAAK,SAAAH,GAAC,OAAIO,IAAQP,EAAGE,KAElD,OADAE,QAAQC,IAAI,sBACLC,qCCVTX,EAAAC,EAAAC,GAAA,IAAAW,EAAAb,EAAA,KAEeE,EAAA,iBAACI,EAAWQ,GAGzB,IAFA,IAAIC,EAAc,GACZC,EAAI,GAAAC,OAAOH,GACRI,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BH,EAAYK,KAAKJ,EAAKK,MAAM,EAAGH,IAMjC,OAA2B,KAH3BH,EAAcA,EAAYO,OACxB,SAAAjB,GAAC,QAAmB,IAAbA,EAAEc,QAAyB,aAATd,EAAE,OAEbc,QACTJ,EAAYQ,MAAM,SAAAlB,GAAC,OAAImB,kBAAWlB,EAAWD","file":"component---src-pages-vermehrung-tree-all-parent-nodes-are-open-js-c16ec59482dc0223c368.js","sourcesContent":["import isEqual from 'lodash/isEqual'\r\n\r\nexport default (openNodes, url) => {\r\n  if (!url) return false\r\n  if (!openNodes) return false\r\n  if (!openNodes.some) return false\r\n\r\n  console.log('isNodeOpen, 1 of 2')\r\n  const nodeIsOpen = openNodes.some(n => isEqual(n, url))\r\n  console.log('isNodeOpen, 2 of 2')\r\n  return nodeIsOpen\r\n}\r\n","import isNodeOpen from './isNodeOpen'\r\n\r\nexport default (openNodes, nodePassed) => {\r\n  let parentNodes = []\r\n  const node = [...nodePassed]\r\n  for (let i = 1; i < node.length; i++) {\r\n    parentNodes.push(node.slice(0, i))\r\n  }\r\n  // remove 'Projekte' as that is not contained in openNodes\r\n  parentNodes = parentNodes.filter(\r\n    n => !(n.length === 1 && n[0] === 'Projekte'),\r\n  )\r\n  if (parentNodes.length === 0) return true\r\n  return parentNodes.every(n => isNodeOpen(openNodes, n))\r\n}\r\n"],"sourceRoot":""}