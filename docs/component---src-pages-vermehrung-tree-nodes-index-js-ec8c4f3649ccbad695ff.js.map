{"version":3,"sources":["webpack:///./src/pages/Vermehrung/Tree/allParentNodesExist.js","webpack:///./src/pages/Vermehrung/Tree/nodes/compareLabel.js","webpack:///./src/pages/Vermehrung/Tree/isNodeOpen.js","webpack:///./src/pages/Vermehrung/Tree/sort.js","webpack:///./src/pages/Vermehrung/Tree/allParentNodesAreOpen.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/artFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/art.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/sammlung/folder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/sammlung/index.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/kultur/folder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/art/kultur/index.js","webpack:///./src/pages/Vermehrung/Tree/nodes/garten/gartenFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/garten/garten.js","webpack:///./src/pages/Vermehrung/Tree/nodes/herkunft/herkunftFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/herkunft/herkunft.js","webpack:///./src/pages/Vermehrung/Tree/nodes/lieferung/lieferungFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/lieferung/lieferung.js","webpack:///./src/pages/Vermehrung/Tree/nodes/person/personFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/person/person.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/werteListenFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/masseinheitFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/masseinheit.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/zaehleinheitFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/zaehleinheit.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungTypFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungTyp.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungStatusFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungStatus.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungZwischenlagerFolder.js","webpack:///./src/pages/Vermehrung/Tree/nodes/werteListen/lieferungZwischenlager.js","webpack:///./src/pages/Vermehrung/Tree/nodes/index.js"],"names":["__webpack_require__","r","__webpack_exports__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default","n","nodes","nodePassed","parentNodes","nodeUrl","concat","url","pop","i","length","push","slice","filter","nodeUrls","map","console","log","allParentNodesExist","every","some","isEqual","a","b","label","toLowerCase","openNodes","nodeIsOpen","exists","value","sort","isNaN","aI","toString","bI","_isNodeOpen__WEBPACK_IMPORTED_MODULE_0__","node","isNodeOpen","nodeType","menuType","id","hasChildren","_ref","data","get","el","filterTable","parentId","compareLabel","index","lodash_findIndex__WEBPACK_IMPORTED_MODULE_0__","lodash_findIndex__WEBPACK_IMPORTED_MODULE_0___default","artNodes","artIndex","findIndex","art","find","sammlungen","kulturen","compare","store","tree","buildArtFolder","buildGartenFolder","buildHerkunftFolder","buildLieferungFolder","buildPersonFolder","buildWerteListenFolder","forEach","_allParentNodesAreOpen","allParentNodesAreOpen","buildArtArt","buildGartenGarten","buildHerkunftHerkunft","buildLieferungLieferung","buildPersonPerson","buildWLMasseinheitFolder","buildWLZaehleinheitFolder","buildWLLieferungTypFolder","buildWLLieferungStatusFolder","buildWLLieferungZwischenlagerFolder","buildArtSammlungFolder","buildArtKulturFolder","buildWLZaehleinheitZaehleinheit","buildWLLieferungStatusStatus","buildWLLieferungTypTyp","buildWLLieferungZwischenlagerZwischenlager","buildWLMasseinheitMasseinheit","buildArtKultur","buildArtSammlung","uniqBy","join"],"mappings":"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","file":"component---src-pages-vermehrung-tree-nodes-index-js-ec8c4f3649ccbad695ff.js","sourcesContent":["import isEqual from 'lodash/isEqual'\r\n\r\nexport default (nodes, nodePassed) => {\r\n  let parentNodes = []\r\n  const nodeUrl = [...nodePassed.url]\r\n  // pop own url - check only for parents\r\n  nodeUrl.pop()\r\n  for (let i = 1; i < nodeUrl.length; i++) {\r\n    parentNodes.push(nodeUrl.slice(0, i))\r\n  }\r\n  // remove 'Projekte' as that is not contained in openNodes\r\n  parentNodes = parentNodes.filter(\r\n    n => !(n.length === 1 && n[0] === 'Projekte'),\r\n  )\r\n  if (parentNodes.length === 0) return true\r\n\r\n  const nodeUrls = nodes.map(n => n.url)\r\n  console.log(`allParentNodesExist`, {\r\n    nodes,\r\n    nodePassed,\r\n    parentNodes,\r\n    nodeUrls,\r\n  })\r\n  const allParentNodesExist = parentNodes.every((n, i) => {\r\n    console.log(`allParentNodesExist, ${i + 1} of ${parentNodes.length + 1}`)\r\n    return nodeUrls.some(url => isEqual(url, n))\r\n  })\r\n  console.log(`allParentNodesExist, last`)\r\n  return allParentNodesExist\r\n}\r\n","export default (a, b) => {\r\n  if (a.label.toLowerCase() < b.label.toLowerCase()) {\r\n    return -1\r\n  } else if (a.label.toLowerCase() > b.label.toLowerCase()) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n","import isEqual from 'lodash/isEqual'\r\n\r\nexport default (openNodes, url) => {\r\n  if (!url) return false\r\n  if (!openNodes) return false\r\n  if (!openNodes.some) return false\r\n\r\n  console.log('isNodeOpen, 1 of 2')\r\n  const nodeIsOpen = openNodes.some(n => isEqual(n, url))\r\n  console.log('isNodeOpen, 2 of 2')\r\n  return nodeIsOpen\r\n}\r\n","const exists = value => !!value || value === 0\r\n\r\nconst sort = (a, b, i) => {\r\n  // return if no element at this index\r\n  if (!exists(a[i]) && !exists(b[i])) return 0\r\n  // sort array with no more element at this position first\r\n  if (!exists(a[i]) && exists(b[i])) return -1\r\n  if (exists(a[i]) && !exists(b[i])) return 1\r\n  // sort numbers by value\r\n  if (!isNaN(a[i]) && !isNaN(b[i])) {\r\n    if (a[i] === b[i]) return sort(a, b, i + 1)\r\n    return a - b\r\n  }\r\n  // use string value to compare mixed types\r\n  const aI = isNaN(a[i]) ? a[i] : a[i].toString()\r\n  const bI = isNaN(b[i]) ? b[i] : b[i].toString()\r\n  if (aI.toLowerCase() === bI.toLowerCase()) return sort(a, b, i + 1)\r\n  if (aI.toLowerCase() < bI.toLowerCase()) return -1\r\n  if (aI.toLowerCase() > bI.toLowerCase()) return 1\r\n}\r\n\r\nexport default (a, b) => sort(a, b, 0)\r\n","import isNodeOpen from './isNodeOpen'\r\n\r\nexport default (openNodes, nodePassed) => {\r\n  let parentNodes = []\r\n  const node = [...nodePassed]\r\n  for (let i = 1; i < node.length; i++) {\r\n    parentNodes.push(node.slice(0, i))\r\n  }\r\n  // remove 'Projekte' as that is not contained in openNodes\r\n  parentNodes = parentNodes.filter(\r\n    n => !(n.length === 1 && n[0] === 'Projekte'),\r\n  )\r\n  if (parentNodes.length === 0) return true\r\n  return parentNodes.every(n => isNodeOpen(openNodes, n))\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'artFolder',\r\n      id: 'artFolder',\r\n      label: 'Arten',\r\n      url: ['Arten'],\r\n      sort: [1],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n\r\n  return arten\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'art',\r\n      filterTable: 'art',\r\n      id: `art${el.id}`,\r\n      parentId: 'artFolder',\r\n      label: get(el, 'name', '(keine Art gewählt)'),\r\n      url: ['Arten', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, index]\r\n      return el\r\n    })\r\n}\r\n","import findIndex from 'lodash/findIndex'\r\n\r\nexport default ({ url, nodes }) => {\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'artSammlungenFolder',\r\n      id: `art${url[1]}SammlungenFolder`,\r\n      label: 'Sammlungen',\r\n      url: ['Arten', url[1], 'Sammlungen'],\r\n      sort: [1, artIndex, 2],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\nimport findIndex from 'lodash/findIndex'\r\n\r\nimport compareLabel from '../../compareLabel'\r\nimport allParentNodesExist from '../../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data, url }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n  const art = arten.find(a => a.id === url[1])\r\n  const sammlungen = get(art, 'ae_art_art.sammlungsByartId', [])\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n  console.log('sammlung, artIndex:', artIndex)\r\n\r\n  return sammlungen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'sammlung',\r\n      filterTable: 'sammlung',\r\n      id: `sammlung${el.id}`,\r\n      parentId: `art${url[1]}SammlungenFolder`,\r\n      label: `${get(el, 'datum', '(kein Datum)')}: ${get(\r\n        el,\r\n        'herkunftByherkunftId.nr',\r\n        '(keine Nr.)',\r\n      )}`,\r\n      url: ['Arten', url[1], 'Sammlungen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, artIndex, 2, index]\r\n      return el\r\n    })\r\n}\r\n","import findIndex from 'lodash/findIndex'\r\n\r\nexport default ({ url, nodes }) => {\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'artKulturenFolder',\r\n      id: `art${url[1]}KulturenFolder`,\r\n      label: 'Kulturen',\r\n      url: ['Arten', url[1], 'Kulturen'],\r\n      sort: [1, artIndex, 1],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\nimport findIndex from 'lodash/findIndex'\r\n\r\nimport compareLabel from '../../compareLabel'\r\nimport allParentNodesExist from '../../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data, url }) => {\r\n  const arten = get(data, 'hasura.ae_art', [])\r\n  const art = arten.find(a => a.id === url[1])\r\n  const kulturen = get(art, 'ae_art_art.kultursByartId', [])\r\n  const artNodes = nodes.filter(n => n.parentId === 'artFolder')\r\n  const artIndex = findIndex(artNodes, n => n.id === `art${url[1]}`)\r\n  console.log('kultur, artIndex:', artIndex)\r\n\r\n  return kulturen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'kultur',\r\n      filterTable: 'kultur',\r\n      id: `kultur${el.id}`,\r\n      parentId: `art${url[1]}KulturenFolder`,\r\n      label: get(el, 'gartenBygartenId.personBypersonId.name', '(kein Name)'),\r\n      url: ['Arten', url[1], 'Kulturen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [1, artIndex, 1, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'gartenFolder',\r\n      id: 'gartenFolder',\r\n      label: 'Gärten',\r\n      url: ['Gaerten'],\r\n      sort: [2],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const gaerten = get(data, 'hasura.garten', [])\r\n\r\n  return gaerten\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'garten',\r\n      filterTable: 'garten',\r\n      id: `garten${el.id}`,\r\n      parentId: 'gartenFolder',\r\n      label: get(el, 'personBypersonId.name', '(kein Garten gewählt)'),\r\n      url: ['Gaerten', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [2, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'herkunftFolder',\r\n      id: 'herkunftFolder',\r\n      label: 'Herkünfte',\r\n      url: ['Herkuenfte'],\r\n      sort: [3],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const herkuenfte = get(data, 'hasura.herkunft', [])\r\n\r\n  return (\r\n    herkuenfte\r\n      .map(el => ({\r\n        nodeType: 'table',\r\n        menuType: 'herkunft',\r\n        filterTable: 'herkunft',\r\n        id: `herkunft${el.id}`,\r\n        parentId: 'herkunftFolder',\r\n        label: get(el, 'lokalname', '(keine Herkunft gewählt)'),\r\n        url: ['Herkuenfte', el.id],\r\n        hasChildren: true,\r\n      }))\r\n      .filter(n => allParentNodesExist(nodes, n))\r\n      // sort by label\r\n      .sort(compareLabel)\r\n      .map((el, index) => {\r\n        el.sort = [3, index]\r\n        return el\r\n      })\r\n  )\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'lieferungFolder',\r\n      id: 'lieferungFolder',\r\n      label: 'Lieferungen',\r\n      url: ['Lieferungen'],\r\n      sort: [4],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const lieferungen = get(data, 'hasura.lieferung', [])\r\n\r\n  return (\r\n    lieferungen\r\n      .map(el => ({\r\n        nodeType: 'table',\r\n        menuType: 'lieferung',\r\n        filterTable: 'lieferung',\r\n        id: `lieferung${el.id}`,\r\n        parentId: 'lieferungFolder',\r\n        label: `${get(el, 'von_datum', '(kein von-Datum)')}: ${get(\r\n          el,\r\n          'personBypersonId.name',\r\n          '(keine Person)',\r\n        )}`,\r\n        url: ['Lieferungen', el.id],\r\n        hasChildren: true,\r\n      }))\r\n      .filter(n => allParentNodesExist(nodes, n))\r\n      // sort by label\r\n      .sort(compareLabel)\r\n      .map((el, index) => {\r\n        el.sort = [4, index]\r\n        return el\r\n      })\r\n  )\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'personFolder',\r\n      id: 'personFolder',\r\n      label: 'Personen',\r\n      url: ['Personen'],\r\n      sort: [5],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const personen = get(data, 'hasura.person', [])\r\n\r\n  return personen\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'person',\r\n      filterTable: 'person',\r\n      id: `person${el.id}`,\r\n      parentId: 'personFolder',\r\n      label: get(el, 'name', '(kein Name)'),\r\n      url: ['Personen', el.id],\r\n      hasChildren: true,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [5, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'werteListenFolder',\r\n      id: 'werteListenFolder',\r\n      label: 'Werte-Listen',\r\n      url: ['Werte-Listen'],\r\n      sort: [6],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'masseinheitenFolder',\r\n      id: 'masseinheitenFolder',\r\n      parentId: 'werteListenFolder',\r\n      label: 'Masseinheiten',\r\n      url: ['Werte-Listen', 'Masseinheiten'],\r\n      sort: [6, 1],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const werte = get(data, 'hasura.masseinheit_werte', [])\r\n\r\n  return werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'masseinheit_werte',\r\n      filterTable: 'masseinheit_werte',\r\n      id: `masseinheit${el.id}`,\r\n      parentId: 'masseinheitenFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Masseinheiten', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 1, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'zaehleinheitenFolder',\r\n      id: 'zaehleinheitenFolder',\r\n      parentId: 'werteListenFolder',\r\n      label: 'Zähleinheiten',\r\n      url: ['Werte-Listen', 'Zaehleinheiten'],\r\n      sort: [6, 2],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const werte = get(data, 'hasura.zaehleinheit_werte', [])\r\n\r\n  return werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'zaehleinheit_werte',\r\n      filterTable: 'zaehleinheit_werte',\r\n      id: `zaehleinheit${el.id}`,\r\n      parentId: 'zaehleinheitenFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Zaehleinheiten', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 2, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'lieferungTypFolder',\r\n      id: 'lieferungTypFolder',\r\n      parentId: 'werteListenFolder',\r\n      label: 'Lieferung: Typ',\r\n      url: ['Werte-Listen', 'Lieferung-Typ'],\r\n      sort: [6, 3],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_typ_werte', [])\r\n\r\n  return werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_typ_werte',\r\n      filterTable: 'lieferung_typ_werte',\r\n      id: `lieferungTyp${el.id}`,\r\n      parentId: 'lieferungTypFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Typ', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 3, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'lieferungStatusFolder',\r\n      id: 'lieferungStatusFolder',\r\n      parentId: 'werteListenFolder',\r\n      label: 'Lieferung: Status',\r\n      url: ['Werte-Listen', 'Lieferung-Status'],\r\n      sort: [6, 4],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_status_werte', [])\r\n\r\n  return werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_status_werte',\r\n      filterTable: 'lieferung_status_werte',\r\n      id: `lieferungStatus${el.id}`,\r\n      parentId: 'lieferungStatusFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Status', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 4, index]\r\n      return el\r\n    })\r\n}\r\n","export default () => {\r\n  return [\r\n    {\r\n      nodeType: 'folder',\r\n      menuType: 'lieferungZwischenlagerFolder',\r\n      id: 'lieferungZwischenlagerFolder',\r\n      parentId: 'werteListenFolder',\r\n      label: 'Lieferung: Zwischenlager',\r\n      url: ['Werte-Listen', 'Lieferung-Zwischenlager'],\r\n      sort: [6, 5],\r\n      hasChildren: true,\r\n    },\r\n  ]\r\n}\r\n","import get from 'lodash/get'\r\n\r\nimport compareLabel from '../compareLabel'\r\nimport allParentNodesExist from '../../allParentNodesExist'\r\n\r\nexport default ({ nodes, data }) => {\r\n  const werte = get(data, 'hasura.lieferung_zwischenlager_werte', [])\r\n\r\n  return werte\r\n    .map(el => ({\r\n      nodeType: 'table',\r\n      menuType: 'lieferung_zwischenlager_werte',\r\n      filterTable: 'lieferung_zwischenlager_werte',\r\n      id: `lieferungZwischenlager${el.id}`,\r\n      parentId: 'lieferungZwischenlagerFolder',\r\n      label: get(el, 'wert', '(kein Wert)'),\r\n      url: ['Werte-Listen', 'Lieferung-Zwischenlager', el.id],\r\n      hasChildren: false,\r\n    }))\r\n    .filter(n => allParentNodesExist(nodes, n))\r\n    .sort(compareLabel)\r\n    .map((el, index) => {\r\n      el.sort = [6, 5, index]\r\n      return el\r\n    })\r\n}\r\n","import uniqBy from 'lodash/uniqBy'\r\n//import get from 'lodash/get'\r\n\r\nimport sort from '../sort'\r\nimport allParentNodesExist from '../allParentNodesExist'\r\nimport allParentNodesAreOpen from '../allParentNodesAreOpen'\r\nimport buildArtFolder from './art/artFolder'\r\nimport buildArtArt from './art/art'\r\nimport buildArtSammlungFolder from './art/sammlung/folder'\r\nimport buildArtSammlung from './art/sammlung'\r\nimport buildArtKulturFolder from './art/kultur/folder'\r\nimport buildArtKultur from './art/kultur'\r\nimport buildGartenFolder from './garten/gartenFolder'\r\nimport buildGartenGarten from './garten/garten'\r\nimport buildHerkunftFolder from './herkunft/herkunftFolder'\r\nimport buildHerkunftHerkunft from './herkunft/herkunft'\r\nimport buildLieferungFolder from './lieferung/lieferungFolder'\r\nimport buildLieferungLieferung from './lieferung/lieferung'\r\nimport buildPersonFolder from './person/personFolder'\r\nimport buildPersonPerson from './person/person'\r\nimport buildWerteListenFolder from './werteListen/werteListenFolder'\r\nimport buildWLMasseinheitFolder from './werteListen/masseinheitFolder'\r\nimport buildWLMasseinheitMasseinheit from './werteListen/masseinheit'\r\nimport buildWLZaehleinheitFolder from './werteListen/zaehleinheitFolder'\r\nimport buildWLZaehleinheitZaehleinheit from './werteListen/zaehleinheit'\r\nimport buildWLLieferungTypFolder from './werteListen/lieferungTypFolder'\r\nimport buildWLLieferungTypTyp from './werteListen/lieferungTyp'\r\nimport buildWLLieferungStatusFolder from './werteListen/lieferungStatusFolder'\r\nimport buildWLLieferungStatusStatus from './werteListen/lieferungStatus'\r\nimport buildWLLieferungZwischenlagerFolder from './werteListen/lieferungZwischenlagerFolder'\r\nimport buildWLLieferungZwischenlagerZwischenlager from './werteListen/lieferungZwischenlager'\r\n\r\nconst compare = (a, b) => {\r\n  // sort a before, if it has no value at this index\r\n  if (a !== 0 && !a) return -1\r\n  // sort a after if b has no value at this index\r\n  if (b !== 0 && !b) return 1\r\n  // sort a before if its value is smaller\r\n  return a - b\r\n}\r\n\r\nexport default ({ store, data }) => {\r\n  console.log('nodes, start')\r\n  /*\r\n  const masseinheitWerte = get(data, 'hasura.masseinheit_werte', [])\r\n  const zaehleinheitWerte = get(data, 'hasura.zaehleinheit_werte', [])\r\n  const lieferungZwischenlagerWerte = get(\r\n    data,\r\n    'hasura.lieferung_zwischenlager_werte',\r\n    [],\r\n  )\r\n  const lieferungStatusWerte = get(data, 'hasura.lieferung_status_werte', [])\r\n  const lieferungTypWerte = get(data, 'hasura.lieferung_typ_werte', [])\r\n  */\r\n\r\n  let openNodes = store.tree.openNodes.sort(sort)\r\n\r\n  let nodes = [\r\n    ...buildArtFolder(),\r\n    ...buildGartenFolder(),\r\n    ...buildHerkunftFolder(),\r\n    ...buildLieferungFolder(),\r\n    ...buildPersonFolder(),\r\n    ...buildWerteListenFolder(),\r\n  ]\r\n\r\n  /**\r\n   * We ALWAYS add an array of nodes,\r\n   * never a single one\r\n   * not even for folders that are never more than one\r\n   * because the function adding the nodes\r\n   * should be able to pass none as well\r\n   * for instance if a parent node is not open\r\n   * or some filter is active\r\n   */\r\n  openNodes.forEach(url => {\r\n    const _allParentNodesAreOpen = allParentNodesAreOpen(openNodes, url)\r\n    console.log('nodes, allParentNodesAreOpen', _allParentNodesAreOpen)\r\n    if (!allParentNodesAreOpen(openNodes, url)) return\r\n    if (url.length === 1 && url[0] === 'Arten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtArt({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Gaerten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildGartenGarten({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Herkuenfte') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildHerkunftHerkunft({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Lieferungen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildLieferungLieferung({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Personen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildPersonPerson({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 1 && url[0] === 'Werte-Listen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLMasseinheitFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        ...buildWLZaehleinheitFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        ...buildWLLieferungTypFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        ...buildWLLieferungStatusFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n        ...buildWLLieferungZwischenlagerFolder({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (url.length === 2 && url[0] === 'Arten') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtSammlungFolder({\r\n          nodes,\r\n          url,\r\n        }),\r\n        ...buildArtKulturFolder({\r\n          nodes,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Zaehleinheiten'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLZaehleinheitZaehleinheit({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Status'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungStatusStatus({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Typ'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungTypTyp({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Lieferung-Zwischenlager'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLLieferungZwischenlagerZwischenlager({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n    if (\r\n      url.length === 2 &&\r\n      url[0] === 'Werte-Listen' &&\r\n      url[1] === 'Masseinheiten'\r\n    ) {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildWLMasseinheitMasseinheit({\r\n          nodes,\r\n          data,\r\n        }),\r\n      ]\r\n    }\r\n\r\n    if (url.length === 3 && url[0] === 'Arten' && url[2] === 'Kulturen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtKultur({\r\n          nodes,\r\n          data,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n    if (url.length === 3 && url[0] === 'Arten' && url[2] === 'Sammlungen') {\r\n      nodes = [\r\n        ...nodes,\r\n        ...buildArtSammlung({\r\n          nodes,\r\n          data,\r\n          url,\r\n        }),\r\n      ]\r\n    }\r\n  })\r\n\r\n  nodes = nodes.filter(n => allParentNodesExist(nodes, n))\r\n  /**\r\n   * There is something weird happening when filtering data\r\n   * that leads to duplicate nodes\r\n   * Need to solve that but in the meantime use uniqBy\r\n   */\r\n  nodes = uniqBy(nodes, n => n.url.join())\r\n\r\n  /**\r\n   * As all nodes are now in one flat list,\r\n   * we need to sort them\r\n   *\r\n   * This is the sorting algorithm:\r\n   *\r\n   * compare the sort array value in the nodes\r\n   * to determine sorting\r\n   *\r\n   * compare arrays element by element, starting with first\r\n   * if a has no value at this index (> a is folder), sort a before b\r\n   * if b has no value at this index (> b is folder), sort a after b\r\n   * if a is smaller than b, sort a before b\r\n   * if both array elements at this index are same,\r\n   * compare values at next index\r\n   *\r\n   * see: stackoverflow.com/questions/13211709/javascript-sort-array-by-multiple-number-fields\r\n   */\r\n  return nodes.sort(\r\n    (a, b) =>\r\n      compare(a.sort[0], b.sort[0]) ||\r\n      compare(a.sort[1], b.sort[1]) ||\r\n      compare(a.sort[2], b.sort[2]) ||\r\n      compare(a.sort[3], b.sort[3]) ||\r\n      compare(a.sort[4], b.sort[4]) ||\r\n      compare(a.sort[5], b.sort[5]) ||\r\n      compare(a.sort[6], b.sort[6]) ||\r\n      compare(a.sort[7], b.sort[7]) ||\r\n      compare(a.sort[8], b.sort[8]) ||\r\n      compare(a.sort[9], b.sort[9]) ||\r\n      compare(a.sort[10], b.sort[10]),\r\n  )\r\n}\r\n"],"sourceRoot":""}